# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PcbPlacer
else:
    import _PcbPlacer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class GridBasedPlacer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, db: "kicadPcbDataBase &"):
        _PcbPlacer.GridBasedPlacer_swiginit(self, _PcbPlacer.new_GridBasedPlacer(db))
    __swig_destroy__ = _PcbPlacer.delete_GridBasedPlacer

    def test_placer_flow(self) -> "kicadPcbDataBase &":
        return _PcbPlacer.GridBasedPlacer_test_placer_flow(self)

    def getDb(self) -> "kicadPcbDataBase &":
        return _PcbPlacer.GridBasedPlacer_getDb(self)
    mDb = property(_PcbPlacer.GridBasedPlacer_mDb_get, _PcbPlacer.GridBasedPlacer_mDb_set)

    def get_total_cost(self) -> "double":
        return _PcbPlacer.GridBasedPlacer_get_total_cost(self)

    def get_wirelength_cost(self) -> "double":
        return _PcbPlacer.GridBasedPlacer_get_wirelength_cost(self)

    def get_overlap_cost(self) -> "double":
        return _PcbPlacer.GridBasedPlacer_get_overlap_cost(self)

    def get_temperature(self) -> "double":
        return _PcbPlacer.GridBasedPlacer_get_temperature(self)

    def set_overlap_weight(self, cst: "double") -> "void":
        return _PcbPlacer.GridBasedPlacer_set_overlap_weight(self, cst)

    def set_wirelength_weight(self, cst: "double") -> "void":
        return _PcbPlacer.GridBasedPlacer_set_wirelength_weight(self, cst)

    def set_initial_move_radius(self, eps: "double") -> "void":
        return _PcbPlacer.GridBasedPlacer_set_initial_move_radius(self, eps)

    def set_iterations_moves(self, iter: "int") -> "void":
        return _PcbPlacer.GridBasedPlacer_set_iterations_moves(self, iter)

    def set_num_iterations(self, iter: "int") -> "void":
        return _PcbPlacer.GridBasedPlacer_set_num_iterations(self, iter)

    def set_initial_temperature(self, tmp: "double") -> "void":
        return _PcbPlacer.GridBasedPlacer_set_initial_temperature(self, tmp)

# Register GridBasedPlacer in _PcbPlacer:
_PcbPlacer.GridBasedPlacer_swigregister(GridBasedPlacer)



